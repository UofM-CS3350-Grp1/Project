package business;

import java.util.ArrayList;

import org.hsqldb.lib.Iterator;

import objects.Client;
import objects.Service;
import objects.Contract;
import persistence.StubDBInterface;

public class ProcessBusinessFinancials 
{

	private StubDBInterface database;
	private Contract contract;
	private ArrayList<Contract> contractList;
	private ArrayList<Service> serviceList;
	private Service service;
	private Client client;
	
	/**
	 * initialize values
	 */
	public ProcessBusinessFinancials()
	{
		database = new StubDBInterface("dbName");
		contract = null;
		service = null;
		client = null;
	}
	
	/*
	 * I'm not sure what the purpose of set category is but 
	 * its functionality should be done via polymorphism
	 */
	
	/**
	 * set the object you want to work with
	 * There might be a better way for doing this
	 */
	public void setCategory(Object obj)
	{
		if(obj instanceof Service)
			service = (Service)obj;
		else if(obj instanceof Contract)
			contract = (Contract)obj;
		else if(obj instanceof Client)
			client = (Client)obj;
	}
	
	/**
	 * @return the profit generated by one of:
	 * 			-client
	 * 			-contract
	 * 			-service
	 */
	public double getProfit()
	{
		return 0;
	}

	/**
	 * @return the expenses incurred by one of:
	 * 			-client
	 * 			-contract
	 * 			-service
	 */
	public double getExpenses()
	{
		return 0;
	}
	
	/**
	 * @return the revenue generated from a:
	 * 			-client (combines dollar amount from all signed contracts for that client)
	 * 			-contract (total dollar amount of contract)
	 * 			-service (total revenue by service)
	 */
	public double getRevenue()
	{
		double result = 0;
		
		if(contract!=null)
		{
			return contract.getValue();
		}
		
		if(client!=null)
		{
			contractList = database.dumpContracts();
			Iterator it = (Iterator) contractList.iterator();
			
			while(it.hasNext())
			{
				contract = (Contract) it.next();
				if(contract.getBusinessName()==client.getBusinessName())
					result += contract.getValue();
			}
			return result;
		}
		
		if(service!=null)
		{
			contractList = database.dumpContracts();
			Iterator it = (Iterator) contractList.iterator();
			
			while(it.hasNext())
			{
				contract = (Contract) it.next();
				serviceList = contract.getServices();
				Iterator it2 = (Iterator) serviceList.iterator();
				Service temp = null;
				while(it2.hasNext())
				{
					temp = (Service) it2.next();
					if(temp.getID()==service.getID())
						result += temp.getRate();
				}
			}
			return result;
		}
		return 0;
	}
}
