COMP3350 Summer 2014 Group 1 Project
Please add new issues to the top of the list following the template format below.
Be sure to name yourself when working on an issue so that multiple people aren't working on the same problem simultaneously.

template:

Task:
Date: MM/DD, time
Assigned to: none
Status: inactive
Duration:
Description:




Iteration 2:
TODO(Dell):

TODO(Timothy):
		
TODO(Derek):
		

TODO(Karl):
		- Refactor Stub UI into single window application

TODO(Jason):

			
TODO(Adrian):
		- Familiarize myself with GUI structure.
		- Modify SERVICES table/model to reflect changes in new client data.


-------------------------ADD NEW TASKS HERE------------------------------------------------------

Task: ServiceScreen Composite
Date: 6/18, 7:30pm
Assigned to: Karl
Status: in progress
Duration: 1 hour
Description: Convert the ServiceScreen into a composite. Update: other features not yet implemented prevent service screen from functioning properly


Task: Financial tracking (for the business)
Date: 6/18, 1:30am
Assigned to: Jason
Status: starting 06/20
Duration: 
Description:

				
Task: Contract processing
Date: 6/18 
Assigned to: Jason
Status: In progress
Duration: 
Description: implementing contract processing (search/insert/delete/modify/services)
				
				
Task: Tracking and History UI
Date: 6/18, 1:30am
Assigned to: Tim
Status: In progress
Duration: 2 hours
Description:	Created initial composites for adding and updating trackable features
				Created initial composites for adding and updating feature history


Task: Refactoring
Date: 6/17, 8:00pm
Assigned to: Tim
Status: In progress
Duration: 20 minutes
Description:	Pulled phone number and email into their own classes.


Task: Login Composite
Date: 6/17
Assigned to: Dell
Status: Graphical/Non-Functional
Duration: 40 mins
Description:	A composite constructor can be used to create the login composite
				See SwitchScreen.java for how to use it to work with a parent shell
				
Task: Documenting ClientScreenDrawer source
Date: 6/17
Assigned to: Dell
Status: Constructor documented
Duration: 1 minute
Description:	A rough explanation on how to use the constructor to attach the composite to a parent
				See SwitchScreen.java for how to use it to work with a parent shell
				
Task: Composite Switching Shell
Date: 6/17
Assigned to: Dell
Status: Login and Clients can switch on button press
Duration: 2 hours
Description:	Running SwitchScreen.java's main:
					You can display the Clients screen content by pressing the "CLIENTS" button
					You can display the Login screen by pressing the "LOG IN" button
				I couldn't compile ProgramShell.java; so until I get that working, someone else can adapt
					ProgramShell to have the same functionality if you study SwitchScreen.java's code
					
Task: Service/ Performance Tracking 
Date: 6/17, 2:00pm
Assigned to: Tim
Status: In progress
Duration: 30 minutes
Description:	Created first, rough draft of service/ performance tracking objects



--------------
Meeting Summary
Date: 06/17
Jason and Derek met with the client and gathered more information. We discussed the information and how we would store it. 
The client wanted us to add an additional feature where he could add specific items to track. We have initially determined that this would not be a problem 
--------------



Task: Requirements gathering
Date: 6/16
Assigned to: Jason
Status:
Duration: 30min
Description: additional requirements gathering from our customer
				

Task: Client Screen - Composite Version
Data: 06/16
Assigned to: Dell
Status: Graphical/Non-functional
Duration: 3 hours
Description:	A composite version of the client screen for the composite based GUI
				Non-functional
				
Task: Composite Switching based GUI
Date: 06/16
Assigned to: Dell
Status: In progress
Duration: 2 days?
Description:	A composite based GUI now exists as an option
				- just put a composite in there, and it should be fine
				- none of the buttons work
				- haven't actually put a composite in there either


Task: Redo UI
Date: 06/14
Assigned to: Karl
Status: In progress
Duration: 6 hours
Description: Refactor Stub UI into single window application


--------------
Meeting Summary
Date: 06/12
Discussed what we needed to do for iteration 2. This mostly included the design of the user interface and the way in which certain data will be stored. 
--------------


Task: Housekeeping
Date: 06/08 
Assigned to: Tim
Status: In progress
Duration: 1 hour
Description: 	Enforced the common coding style
				Added additional documentation
				Removed dead code


Task: UI
Date: 06/08 
Assigned to: Tim
Status: In progress
Duration: 30 minutes
Description: 	Fixed and cleaned issues with home, client and service screens


Task: Service GUI
Date: 06/08 
Assigned to: Tim
Status: In progress
Duration: 1.5 hours
Description: 	Updated the Service screen to match the same style as the Client screen


Task: Login Reaction Listener Fix
Date: 06/08
Assigned to: Dell
Status: done
Duration: 10 mins
Description:	- the label changes when typing; fixed it

Task: Add/edit/delete services
Date: 06/08
Assigned to: Jason
Status: in progress
Duration: 1hrs
Description: configured settings between edit/delete/add
		-need to update the query calls yet


Task: Cleaned homescreen
Date: 06/08
Assigned to: Dell
Status: Complete
Duration: 10 mins
Description:	- separated login from operations
				- made window compact and neater 
				
Task: Stub DB
Date: 06/08
Assigned to: Adrian
Status: In progress
Duration: 15 mins.
Description:	More bugfixes to DBMS controller.
				Reviewed peristence in HyperSQL.
				Currently running memory tables for simplicity.
					(Can be found in databases/Test.script)
				Will switch out to cache when table size increases.

Task: Documentation
Date: 06/07
Assigned to: Adrian
Status: In progress
Duration: 30 mins.
Description:	Created User Stories Cards
				Created Simple Architecture Diagram
				Check UofM email for documents.

Task: Contract tests
Date: 06/07, 10:40pm
Assigned to: Tim
Status: In progress
Duration:	45 minutes
Description: 	Added tests for contract
				Added invalid argument checks to contract.


Task: Stub DB
Date: 06/07
Assigned to: Adrian
Status: In progress
Duration: 1 hr
Description:	Added tests for DBController.
				Fixed bugs in DBController.

Task: Stub UI
Date: 06/07, 08:30pm
Assigned to: Tim
Status: In Progress
Duration: 30 minutes
Description:	Cleaned up client window.	
				Added close button to client window.
				Added quit button to home screen.


Task: Login Stub
Date: 06/06
Assigned to: Dell
Status: Complete
Duration: 30 min
Description:	- A login is "available" in home screen; input is possible, and the listeners are
				ready to be modified for handling real credentials
				
Task: Stub DB
Date: 06/05
Assigned to: Adrian
Status: In progress
Duration: 1.5 hr
Description:	- Added base generic INSERT/UPDATE/DELETE functionality to
				DBController as well as some error checking.
				- Modified model objects slightly, forced the implementation
				of a toIndex() method in all storable classes.
				- Added some basic table dumps to StubDBInterface. Returns
				ArrayList<#Model Requested#>
				
				
--------------
Meeting Summary
Date: 06/05
Discussed what was left to do in this iteration. Finalized System architecture diagram. Re-evaluated big user stories. Created deatailed user stories for iteration 2. 
--------------


Task: Service tests
Date: 06/04, 2:50pm
Assigned to: Tim
Status: In progress
Duration: 30 minutes
Description: 	Added some tests for the Client class.
				Added an empty name check to Client.


Task: Add/edit services
Date: 06/04, time
Assigned to: Jason
Status: in progress
Duration: 2hrs
Description: rough gui completed, needs some tweaking yet


Task: Service tests
Date: 06/04, 1:30pm
Assigned to: Tim
Status: In progress
Duration:	45 minutes
Description: 	Added some tests for the service class.
				Modified the service class to throw InvalidArgumentExceptions from the constructor and performed some error checking on the mutators 


Task: Export files to docx/pdf
Date: 06/04, time
Assigned to: Jason
Status: in progress
Duration: 3hours
Description: I figured out how to export data to pdf format and save locally. I have added the required "rough" code
		to the Contract.java class (commented out) (jar files needed, unable to upload atm due to 
		authorization issue).


Task: Login screen
Date: 06/03, 9:00pm
Assigned to: Jason
Status: Wrapping up
Duration: 30min
Description: Create secure login screen. Need to connect to user table in db.


Task: Additional data collection for clients, services and contracts
Date: 06/01, 2:00pm
Assigned to: Jason
Status: Completed
Duration: 1 hour
Description: Retrieved additional client/services/contract information needed for the app from the customer


Task: Testing 
Date: 06/03, 2:30pm
Assigned to: Tim
Status: In Progress
Duration: 	1 hour
Description:	Created test foundation.


Task: Stub UI
Date: 06/03, 11:35am
Assigned to: Tim
Status: In Progress
Duration: 10 minutes
Description:	Cleaned up client window.


Task: Stub UI
Date: 06/02, 7:30pm
Assigned to: Tim
Status: In Progress
Duration: 30 minutes
Description:	Modified interface to edit client information via clicking list object instead of a button


Task: Update/create detailed user stories for iteration 2
Date: 06/02, 7:20pm
Assigned to: All
Status: Completed
Duration: 30 minutes
Description: Update big user stories based on what has been completed and what the following iterations will look like. Also create detailed user stories for iteration 2.


Task: Create scripts to build program
Date: 06/02, 7:20pm
Assigned to: Derek 
Status: Complete
Duration: 1.5hrs
Description: Create the set of files described in the iteration 1 document on how to build and run the program and tests


Task StubDB
Date: 06/02
Assigned to: Adrian
Status: Stub Completed, DBMS in Progress
Duration:
Description:	Added stub DBMS Interface for objects (QUERY/INSERT/UPDATE/DROP) (No DBMS access).
				Changed DBMS Controller methods.
				Minor changes to models. (Added getID methods where they didn't exist)
				
				
--------------
Meeting Summary
Date: 05/30
Discussed current state of development. Decided to focus on client and service management, and leave contract management for later if we have time for it this iteration.
Contract file types were also discussed. Input from within and outside the program were considered. Discussed .txt, .pdf, .docx, and image formats for input and output of
	the base contract, contract stubs, and the signed copy of the contracts. More information about what the client would like is needed before we can proceed with the contracts
--------------



Task: Stub DB
Date: 05/30, 12:08pm
Assigned to: Adrian
Status: In Progress
Duration:
Description: 	Implemented search functionality for Clients/Contracts against DB in controller
				Loaded Client/Contract tables into test DB
				Added interface methods for Clients/Contracts

Task: Stub DB
Date: 05/29, 5:01pm
Assigned to: Adrian
Status: In Progress
Duration:
Description: 	Created generic functions for building query statements in DBCOntroller.
				Created interface layer for DB controller.
				Removed abstract type from Service and TestService from models.
				Implemented search functionality for services by Title and ID.
				Added SERVICE_TYPE field to DBMS implementation of SERVICES
				
				##NOTE: Only mildly tested/debugged, behavior may be inconsistent/easy to break.## 

Task: Stub UI Client Screen
Date: 5/28, 8:58pm
Assigned to: Tim
Status: In progress
Duration: 3 hours
Description: Created a basic interface to add, edit and delete client information.

Task: Client
Date: 5/28, 8:24pm
Assigned to: Tim
Status: In progress
Duration: 15 minutes
Description: Added accessors and mutators for the client.
			 Added some basic validation to client mutators. 

Task: Created a basic Contract class
Date: 5/28, 1:10pm
Assigned to: Tim
Status: Completed
Duration: 15 minutes
Description: Created a basic Contract class

Task: Document Code
Date: 05/28, 1:01 PM
Assigned to: Dell
Status: In Progress
Duration:
Description: 	Client		 	- Added some clarification to the exception thrown by the constructor.
				Service 		- Added a question
				DBController	- Added javadoc for easy lookup; just hover over the method name; remove if unwanted

Task: Create a testing suite for Client
Date: 05/28, 1:05
Assigned to: Dell
Status: In Progress
Duration:
Description: created the tests package and the TestClient class for testing valid Client states


Task: Additional requirements gathering
Date: 05/27, time
Assigned to: Jason
Status: in progress
Duration: 1hrs
Description: talked with customer regarding some more details that he wants to include
		when saving client/contact/service information.


Task: Stub DB
Date: 05/27, 5:20pm
Assigned to: Adrian
Status: In Progress
Duration:
Description: Created test DB and prototype controller, added empty Storable interface.

Task: Service Models
Date: 05/27, 3:39pm
Assigned to: Adrian
Status: Completed
Duration:
Description: Created abstract parent class and prototype TestService.

Task: Client class
Date: 5/27, 2:29pm
Assigned to: Dell
Status: created
Duration:
Description: Created a basic client class.

Task: Stub UI
Date: 05/26, 7:39pm
Assigned to: Karl
Status: Completed
Duration: 2 hours
Description: Create a basic UI that can be used to navigate through basic components in the program for iteration 1.


Task: Create project
Date: 05/26, 7:34pm
Assigned to: Karl
Status: Completed
Duration: 3 hours
Description: Set up the initial project structure and implement SWT and windowbuilder.
